name: Use Case - TT02

on:
  workflow_dispatch:
  schedule:
  - cron: '*/15 * * * *'
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  usecase-test:
    environment: TT02
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run use case tests for endpoint 'applications'
      run: |
            cd test/k6
            docker-compose run k6 run /src/tests/applications.js -e env=${{ vars.ENV }} -e org=${{ vars.ORG }} -e app=${{ vars.APP }}
    - name: Run use case tests for endpoint 'applications' again
      uses: grafana/k6-action@v0.3.1
      with:
        filename: src/tests/applications.js
        flags: -e env=${{ vars.ENV }} -e org=${{ vars.ORG }} -e app=${{ vars.APP }}
    - name: Run use case tests for endpoint 'instances'
      if: always()
      run: |
            cd test/k6
            docker-compose run k6 run /src/tests/instances.js -e env=${{ vars.ENV }} -e org=${{ vars.ORG }} -e app=${{ vars.APP }} -e userName=${{ secrets.USE_CASE_USER_NAME}} -e userPassword=${{ secrets.USER_PASSWORD}} -e apimSubsKey=${{ secrets.APIM_SUBSKEY }} -e mpClientId=${{ secrets.MP_CLIENT_ID }} -e mpKid=${{ secrets.MP_KID }} -e encodedJwk=${{ secrets.MP_ENCODEDJWK }}
    - name: Run use case tests for endpoint 'instances/sbl'
      if: always()
      run: |
            cd test/k6
            docker-compose run k6 run /src/tests/messageboxinstances.js -e env=${{ vars.ENV }} -e org=${{ vars.ORG }} -e app=${{ vars.APP }} -e userName=${{ secrets.USE_CASE_USER_NAME}} -e userPassword=${{ secrets.USER_PASSWORD}} -e apimSubsKey=${{ secrets.APIM_SUBSKEY }} -e apimSblSubsKey=${{ secrets.APIM_SBL_SUBSKEY }}
    - name: Run use case tests for endpoint 'data'
      if: always()
      run:  |
              cd test/k6
              docker-compose run k6 run /src/tests/data.js -e env=${{ vars.ENV }} -e org=${{ vars.ORG }} -e app=${{ vars.APP }} -e userName=${{ secrets.USE_CASE_USER_NAME}} -e userPassword=${{ secrets.USER_PASSWORD}} -e apimSubsKey=${{ secrets.APIM_SUBSKEY }}
    - name: Run use case tests for endpoint 'process'
      if: always()
      run: |
            cd test/k6
            docker-compose run k6 run /src/tests/process.js -e env=${{ vars.ENV }} -e org=${{ vars.ORG }} -e app=${{ vars.APP }} -e userName=${{ secrets.USE_CASE_USER_NAME}} -e userPassword=${{ secrets.USER_PASSWORD}} -e apimSubsKey=${{ secrets.APIM_SUBSKEY }}
    - name: Run use case tests for endpoint 'sign'
      if: always()
      run:  |
              cd test/k6
              docker-compose run k6 run /src/tests/sign.js -e env=${{ vars.ENV }} -e userName=${{ secrets.USE_CASE_USER_NAME}} -e userPassword=${{ secrets.USER_PASSWORD}} -e org=${{ vars.ORG }} -e app=${{ vars.APP }} -e apimSubsKey=${{ secrets.APIM_SUBSKEY }}
    - name: Run use case tests for endpoint 'texts'
      if: always()
      run: |
            cd test/k6
            docker-compose run k6 run /src/tests/texts.js -e env=${{ vars.ENV }} -e org=${{ vars.ORG }} -e app=${{ vars.APP }} -e apimSubsKey=${{ secrets.APIM_SUBSKEY }} -e mpClientId=${{ secrets.MP_CLIENT_ID }} -e mpKid=${{ secrets.MP_KID }} -e encodedJwk=${{ secrets.MP_ENCODEDJWK }}

    - name: Build failure report
      if: failure()
      run: |

          report=":warning: Storage use case test failure in TT02 :warning: \n"
          report+="\n Workflow available here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "stepreport="$report >> $GITHUB_ENV
    - name: Report failure to Slack
      if: failure()
      id: slack
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
            {
              "text": "${{ env.stepreport }}"
            }
      env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_PROD }}

